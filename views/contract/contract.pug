include ../transaction/transaction

mixin contract(contract, templates_contract, admin) 
  - const totals = contract.calculateToDate()
  .col-md-12(id="contract_" + contract.id)
    .card
      .card-header
        .row
          .h5.section-title.col-md-auto Direktkredit vom #{moment(contract.sign_date).format('DD.MM.YYYY')}
          if admin
            .col-md.text-right.section-actions
              a.btn.btn-light.btn-sm.sidebar-action(href=_url('/contract/edit/'+contract.id))
                span.fa.fa-edit              
              a.btn.btn-light.btn-sm.confirm-action(data-remove-tag='contract_'+contract.id data-link=_url('/contract/delete/'+contract.id) data-confirmtext='Willst du den Direktkredit vom ' + moment(contract.sign_date).format('DD.MM.YYYY') + ' wirklich löschen?')                  
                span.fa.fa-trash
              if templates_contract && templates_contract.length > 0
                a.btn.btn-light.btn-sm.dropdown-toggle(id='contractTemplateButton' type="button" title="Dokument generieren (nach Vorlagen für Kredite)" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false") 
                  span.fa.fa-file                          
                .dropdown-menu.dropdown-menu-right( aria-labelledby="contractTemplateButton")
                  each template in templates_contract
                    a.dropdown-item(href=_url('/docx_c/'+contract.id+'?fileid='+template.id))
                      span.fa.fa-file-download
                      span  
                      span= template.description                          
      .card-body
        table.table
          tbody 
            tr
              td.label: b Kreditnummer
              td= contract.id
            tr
              td.label: b Betrag (Vertrag)
              td= format.formatMoney(contract.amount)
            tr
              td: b Zinssatz
              td= format.formatPercent(contract.interest_rate,3)  
            if contract.interest_method 
              tr
                td: b Alternative Zinsberechnung
                td 
                  span= _t('interest_method_' + contract.interest_method)
                  span  
                  span.fa.fa-info-circle(title=_t('interest_method_hint_' + contract.interest_method))                                                   
            tr
              td: b= _t('interest_payment_type')
              td= _t('interest_payment_type_' + (contract.interest_payment_type || settings.project.get('defaults.interest_payment_type')))
            tr
              td: b Status
              td= contract.getStatus()
            tr.divider
              td: b Kündigungsart
              td= contract.getTerminationTypeFullString()
            if contract.getTerminationType() == "T"
              if (contract.termination_date)
                tr
                  td: b Kündigungsdatum
                  td= moment(contract.termination_date).format('DD.MM.YYYY')
                tr
                  td: b Rückzahlungsfrist
                  td= moment(contract.getPaybackDate()).format('DD.MM.YYYY')
              else
                tr
                  td: b Kündigungsdatum
                  td: i.text-secondary nicht gekündigt
            else if contract.getTerminationType()=="D"
              tr
                td: b Rückzahlungsdatum
                td= moment(contract.getPaybackDate()).format('DD.MM.YYYY')
            else if contract.getTerminationType()=="P"
              tr
                td: b Ende der Laufzeit:
                td= moment(contract.getPaybackDate()).format('DD.MM.YYYY')              
            tr.divider
              td: b Einzahlungen
              td= format.formatMoney(totals.deposits)
            tr
              td: b Rückzahlungen
              td= format.formatMoney(totals.withdrawals)
            tr
              td: b Zinsauszahlungen
              td= format.formatMoney(totals.interestPaid)
            tr
              td: b Nicht rückgefordert
              td= format.formatMoney(totals.notReclaimed)
            tr
              td: b Zinsen bis heute
              td= format.formatMoney(totals.interest)
            if contract.interest_rate_type !== 'disabled'                
              tr.divider
                td: b= _t('interest_rate_type')
                td= _t('interest_rate_type_' + (contract.interest_rate_type || settings.project.get('defaults.interest_rate_type')))
            tr.divider
              if admin
                td: b Aushaftender Betrag
                td= format.formatMoney(totals.end)    
              else 
                td.h6: b Kontostand
                if totals.end > 0
                  td.h6.text-success: b= format.formatMoney(totals.end)    
                else
                  td.h6: b= format.formatMoney(totals.end)    
              
            if ((admin || contract.notes_public) && contract.notes && contract.notes.trim() !== '')      
              tr.divider
                td
                  b 
                    | Notizen
                    if admin
                      | &nbsp;
                      small
                        if contract.notes_public
                          i.fa.fa-eye
                        else
                          i.fa.fa-eye-slash

                td
                  blockquote.note
                    each line in contract.notes.split("\r") 
                      p=line
        table.table
          thead
            tr
              th(colspan="5")
                .row
                  .h6.section-title.col-md-10
                    b Zahlungen
                  if admin && !contract.isTerminated(Date.now())
                    .col-md-2.text-right.section-actions
                      a.btn.btn-light.btn-sm.sidebar-action(href=_url('/transaction/add/'+contract.id))
                        span.fa.fa-plus
          tbody
            if contract.transactions.length == 0
              tr
                td(colspan="4") keine Zahlungen vorhanden
            each transaction in contract.transactions
              +transaction(contract, transaction, admin)

mixin contracts(user, templates_contract, admin)
  .row
    .col-md-12
      .card.no-shadow
        h4.card-header 
          span Direktkredite
          if admin
            span.float-right
              a.btn.btn-light.btn-sm.sidebar-action(href=_url('/contract/add/'+user.id))
                span.fa.fa-plus
        .card-body
          #contracts_container.row
            if (user.contracts.length == 0)
              .col-md-12.empty-container-message Keine Direktkredite vorhanden
            each contract in user.contracts
              +contract(contract, templates_contract, admin)  

mixin contracts_summary(user, admin)
  - const totals = user.calculateToDate()
  .card
    h4.card-header 
      span Kontostand 
      if user.contracts.length > 1
        span  (
        span= user.contracts.length      
        span  Kredite)

    .card-body
      if (user.contracts.length == 0)
        .col-md-12.empty-container-message Keine Direktkredite vorhanden
      else
        table.table
          tbody
            tr
              td.label: b Vertragswert:
              td= format.formatMoney(totals.amount)
            tr
              td: b Einzahlungen
              td= format.formatMoney(totals.deposits)
            tr
              td: b Rückzahlungen
              td= format.formatMoney(totals.withdrawals)
            tr
              td: b Zinsauszahlungen
              td= format.formatMoney(totals.interestPaid)
            tr
              td: b Nicht rückgefordert
              td= format.formatMoney(totals.notReclaimed)              
            tr
              td: b Zinsen bis heute
              td= format.formatMoney(totals.interest)
            tr
              if admin
                td: b Aushaftender Betrag
                td= format.formatMoney(totals.end)    
              else 
                td.h6: b Kontostand
                if totals.end > 0
                  td.h6.text-success: b= format.formatMoney(totals.end)    
                else
                  td.h6: b= format.formatMoney(totals.end)    
